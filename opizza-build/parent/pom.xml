<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!--

    Global parent pom.xml for OPizza modules to inherit from.

    - Shared resources are pulled in from the opizza-build-resources dependency (images, CSS, XSLTs for documentation generation)
    - Renders reference documentation from Asciidoctor file named index.adoc within src/main/asciidoc
    - In the "distribute" profile, an assembly is generated:
      - one to be uploaded to static.springsource.org (incl. javadoc (browsable), reference docs as described before)

    Preconfigures the following:

    - Logging dependencies: SLF4j + Commons Logging bridge and Logback as test dependency
    - Test dependencies: JUnit / Hamcrest / Mockito
    - Dependency versions for commonly used dependencies

    -->

    <modelVersion>4.0.0</modelVersion>

    <artifactId>opizza-parent</artifactId>
    <packaging>pom</packaging>

    <parent>
        <groupId>io.github.bhuwanupadhyay.build</groupId>
        <artifactId>opizza-build</artifactId>
        <version>1.0.0.BUILD-SNAPSHOT</version>
    </parent>

    <name>OPizza Build - General parent module</name>
    <description>Global parent pom.xml to be used by OPizza modules</description>
    <url>http://www.bhuwanupadhyay.io/opizza</url>
    <inceptionYear>2019</inceptionYear>

    <organization>
        <name>BhuwanUpadhyay</name>
        <url>http://www.bhuwanupadhyay.github.io</url>
    </organization>

    <developers>
        <developer>
            <id>developerbhuwan</id>
            <name>Bhuwan Prasad Upadhyay</name>
            <email>bhuwan.upadhyay49@gmail.com</email>
            <organization>BhuwanUpadhyay</organization>
            <organizationUrl>http://www.bhuwanupadhyay.github.io</organizationUrl>
            <roles>
                <role>Project lead</role>
            </roles>
            <timezone>+5</timezone>
        </developer>
    </developers>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0</url>
            <comments>
                Copyright 2008-2017 the original author or authors.

                Licensed under the Apache License, Version 2.0 (the "License");
                you may not use this file except in compliance with the License.
                You may obtain a copy of the License at

                http://www.apache.org/licenses/LICENSE-2.0

                Unless required by applicable law or agreed to in writing, software
                distributed under the License is distributed on an "AS IS" BASIS,
                WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
                implied.
                See the License for the specific language governing permissions and
                limitations under the License.
            </comments>
        </license>
    </licenses>

    <properties>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.root>${basedir}</project.root>
        <source.level>1.8</source.level>
        <dist.id>${project.artifactId}</dist.id>
        <jacoco.destfile>${project.build.directory}/jacoco.exec</jacoco.destfile>

        <assertj>3.11.1</assertj>
        <hamcrest>1.3</hamcrest>
        <jacoco>0.8.3</jacoco>
        <junit>4.13.1</junit>
        <kotlin>1.3.20</kotlin>
        <logback>1.2.3</logback>
        <lombok>1.18.4</lombok>
        <mockito>2.23.4</mockito>
        <slf4j>1.7.25</slf4j>

        <!-- To be overridden by individual modules -->
        <java-module-name/>

    </properties>

    <profiles>

        <profile>

            <!-- Profile to be run on the CI server, JARs JavaDocs -->

            <id>ci</id>

            <build>
                <plugins>

                    <!-- Delombok sources so that generated code shows up in JavaDoc -->

                    <plugin>
                        <groupId>org.projectlombok</groupId>
                        <artifactId>lombok-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>delombok</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>package-javadoc</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                                <phase>package</phase>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>

        </profile>

        <!--
            Profile to be run before a release is executed, currently does the following:

            - Prevents thrid-party snapshot dependencies in projects
        -->

        <profile>
            <id>pre-release</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-enforcer-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>enforce-no-third-party-snapshots</id>
                                <goals>
                                    <goal>enforce</goal>
                                </goals>
                                <configuration>
                                    <rules>
                                        <requireReleaseDeps>
                                            <failWhenParentIsSnapshot>false</failWhenParentIsSnapshot>
                                            <excludes>
                                                <exclude>io.github.bhuwanupadhyay.build:*</exclude>
                                                <exclude>io.github.bhuwanupadhyay.opizza:*</exclude>
                                            </excludes>
                                        </requireReleaseDeps>
                                    </rules>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>

            <!-- Profile for SonarCube -->

            <id>sonarcube</id>

            <build>
                <plugins>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <version>${jacoco}</version>
                        <configuration>
                            <destFile>${jacoco.destfile}</destFile>
                        </configuration>
                        <executions>
                            <execution>
                                <id>jacoco-initialize</id>
                                <goals>
                                    <goal>prepare-agent</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>

            <!--
                Profile to be activated when building the distribution atrifacts.

                Generates reference documentation, aggregates JavaDoc etc. Has to be combined with
                profiles "release" or "milestone" to deploy artifacts into the appropriate places.
            -->

            <id>distribute</id>

            <properties>
                <shared.resources>${project.build.directory}/shared-resources</shared.resources>
                <generated-asciidoc-sources.directory>${project.build.directory}/generated-asciidoc-sources/source/
                </generated-asciidoc-sources.directory>
                <generated-docs.directory>${project.build.directory}/generated-docs</generated-docs.directory>
                <maven.install.skip>true</maven.install.skip>
                <skipTests>true</skipTests>
            </properties>

            <dependencies>
                <dependency>
                    <groupId>io.github.bhuwanupadhyay.build</groupId>
                    <artifactId>opizza-build</artifactId>
                    <version>1.0.0.BUILD-SNAPSHOT</version>
                    <type>zip</type>
                    <optional>true</optional>
                </dependency>
            </dependencies>

            <build>

                <plugins>

                    <!--
                        Unpacks the content of opizza-build-resources into the shared resources folder.
                    -->

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>unpack-doc-resources</id>
                                <goals>
                                    <goal>unpack-dependencies</goal>
                                </goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <includeGroupIds>io.spring.docresources</includeGroupIds>
                                    <includeArtifactIds>spring-doc-resources</includeArtifactIds>
                                    <includeTypes>zip</includeTypes>
                                    <excludeTransitive>true</excludeTransitive>
                                    <outputDirectory>${generated-asciidoc-sources.directory}</outputDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>unpack-shared-resources</id>
                                <goals>
                                    <goal>unpack-dependencies</goal>
                                </goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <includeGroupIds>${project.groupId}</includeGroupIds>
                                    <includeArtifactIds>opizza-build-resources</includeArtifactIds>
                                    <includeTypes>zip</includeTypes>
                                    <excludeTransitive>true</excludeTransitive>
                                    <outputDirectory>${shared.resources}</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>

                    <!--
                        Configures JavaDoc generation.
                    -->

                    <!-- Delombok sources so that generated code shows up in JavaDoc -->

                    <plugin>
                        <groupId>org.projectlombok</groupId>
                        <artifactId>lombok-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>delombok</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.root}/target/generated-sources/delombok</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>aggregate-javadoc</id>
                                <goals>
                                    <goal>aggregate</goal>
                                </goals>
                                <phase>package</phase>
                                <configuration>
                                    <outputDirectory>${project.root}/target/site/apidocs</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!--
                        Copies all namespaces schemas to target/schemas flatten the directory structure.
                        Depended on by the site.xml assembly descriptor.
                    -->

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>

                            <execution>
                                <id>copy-documentation-resources</id>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <target>
                                        <copy todir="${project.root}/target/site/reference/html/images">
                                            <fileset dir="${basedir}/src/main/asciidoc" erroronmissingdir="false">
                                                <include name="**/*.png"/>
                                                <include name="**/*.gif"/>
                                                <include name="**/*.jpg"/>
                                            </fileset>
                                            <flattenmapper/>
                                        </copy>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>

                            <execution>
                                <id>collect-schema-files</id>
                                <phase>prepare-package</phase>
                                <configuration>
                                    <target>
                                        <copy todir="${project.build.directory}/schemas">
                                            <fileset dir="${basedir}" erroronmissingdir="false">
                                                <include name="**/src/main/resources/**/config/spring-*.xsd"/>
                                            </fileset>
                                            <flattenmapper/>
                                        </copy>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>

                            <execution>
                                <id>create-generated-docs-resources</id>
                                <phase>process-resources</phase>
                                <configuration>
                                    <target>
                                        <copy failonerror="false" todir="${generated-asciidoc-sources.directory}/">
                                            <fileset dir="${project.root}/src/main/asciidoc" includes="**/*.adoc"/>
                                        </copy>
                                        <copy failonerror="false" todir="${generated-asciidoc-sources.directory}/images/">
                                            <fileset dir="${project.root}/src/main/asciidoc/images"/>
                                        </copy>

                                        <copy todir="${generated-docs.directory}">
                                            <fileset dir="${generated-asciidoc-sources.directory}">
                                                <include name="css/**"/>
                                                <include name="js/**"/>
                                            </fileset>
                                        </copy>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>

                            <execution>
                                <id>rename-reference-docs</id>
                                <phase>prepare-package</phase>
                                <configuration>
                                    <target>

                                        <!-- Copy files for the single-file HTML version -->
                                        <copy failonerror="false" todir="${project.root}/target/site/reference/html/images">
                                            <fileset dir="${generated-docs.directory}/images"/>
                                        </copy>

                                        <!-- Copy shared resources. Spring Data ones first to override the ones shared -->
                                        <copy failonerror="false" todir="${project.root}/target/site/reference/html/">
                                            <fileset dir="${shared.resources}">
                                                <include name="css/**"/>
                                                <include name="js/**"/>
                                            </fileset>
                                        </copy>

                                        <copy failonerror="false" todir="${project.root}/target/site/reference/html/">
                                            <fileset dir="${generated-asciidoc-sources.directory}">
                                                <include name="css/**"/>
                                                <include name="js/**"/>
                                            </fileset>
                                        </copy>

                                        <copy failonerror="false" todir="${project.root}/target/site/reference/html/">
                                            <fileset dir="${generated-docs.directory}" includes="*.html"/>
                                        </copy>

                                        <!-- Copy and rename the Epub file -->
                                        <copy failonerror="false" file="${generated-docs.directory}/index.pdf" tofile="${project.root}/target/site/reference/pdf/${dist.id}-reference.pdf"/>

                                        <!-- Copy and rename the PDF file -->
                                        <copy failonerror="false" file="${generated-docs.directory}/index.epub" tofile="${project.root}/target/site/reference/epub/${dist.id}-reference.epub"/>

                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>

                        </executions>

                    </plugin>

                </plugins>

                <pluginManagement>
                    <plugins>

                        <!--
                            Asciidoctor
                        -->

                        <plugin>
                            <groupId>org.asciidoctor</groupId>
                            <artifactId>asciidoctor-maven-plugin</artifactId>
                            <dependencies>
                                <dependency>
                                    <groupId>org.asciidoctor</groupId>
                                    <artifactId>asciidoctorj-pdf</artifactId>
                                    <version>1.5.0-alpha.16</version>
                                </dependency>
                                <dependency>
                                    <groupId>org.asciidoctor</groupId>
                                    <artifactId>asciidoctorj-epub3</artifactId>
                                    <version>1.5.0-alpha.8.1</version>
                                </dependency>
                            </dependencies>
                            <executions>

                                <execution>
                                    <id>html</id>
                                    <phase>compile</phase>
                                    <goals>
                                        <goal>process-asciidoc</goal>
                                    </goals>
                                    <configuration>
                                        <sourceDirectory>${generated-asciidoc-sources.directory}</sourceDirectory>
                                        <sourceDocumentName>index.adoc</sourceDocumentName>
                                        <backend>html5</backend>
                                        <outputDirectory>${generated-docs.directory}</outputDirectory>
                                        <sourceHighlighter>highlight.js</sourceHighlighter>
                                        <attributes>
                                            <highlightjsdir>js/highlight</highlightjsdir>
                                            <highlightjs-theme>atom-one-dark-reasonable</highlightjs-theme>
                                            <linkcss>true</linkcss>
                                            <sectanchors>true</sectanchors>
                                            <stylesdir>./css</stylesdir>
                                            <stylesheet>spring.css</stylesheet>
                                            <toc>left</toc>
                                        </attributes>
                                    </configuration>
                                </execution>

                                <!-- Requires a fix to Lombok/Javadoc generation first otherwise build duration explodes
                                <execution>
                                    <id>epub</id>
                                    <phase>compile</phase>
                                    <goals>
                                        <goal>process-asciidoc</goal>
                                    </goals>
                                    <configuration>
                                        <sourceDirectory>${generated-asciidoc-sources.directory}</sourceDirectory>
                                        <sourceDocumentName>index.adoc</sourceDocumentName>
                                        <backend>epub3</backend>
                                        <outputDirectory>${generated-docs.directory}</outputDirectory>
                                        <sourceHighlighter>coderay</sourceHighlighter>
                                    </configuration>
                                </execution>

                                <execution>
                                    <id>pdf</id>
                                    <phase>compile</phase>
                                    <goals>
                                        <goal>process-asciidoc</goal>
                                    </goals>
                                    <configuration>
                                        <sourceDirectory>${generated-asciidoc-sources.directory}</sourceDirectory>
                                        <sourceDocumentName>index.adoc</sourceDocumentName>
                                        <backend>pdf</backend>
                                        <outputDirectory>${generated-docs.directory}</outputDirectory>
                                        <sourceHighlighter>coderay</sourceHighlighter>
                                    </configuration>
                                </execution>

                                 -->

                            </executions>

                            <configuration>
                                <doctype>book</doctype>
                                <attributes>
                                    <doctype>book</doctype>
                                    <docinfo>shared</docinfo>
                                    <icons>font</icons>
                                    <sectids>false</sectids>
                                    <imagesdir>images</imagesdir>
                                    <version>${project.version}</version>
                                    <projectName>${project.name}</projectName>
                                    <projectVersion>${project.version}</projectVersion>
                                    <aspectjVersion>${aspectj}</aspectjVersion>
                                    <querydslVersion>${querydsl}</querydslVersion>
                                    <springVersion>${spring}</springVersion>
                                    <releasetrainVersion>${releasetrain}</releasetrainVersion>
                                    <allow-uri-read>true</allow-uri-read>
                                    <toclevels>4</toclevels>
                                    <numbered>true</numbered>
                                </attributes>
                            </configuration>

                        </plugin>

                        <!--
                            Creates two zip files for download as well as API and reference documentation distribution.
                        -->
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-assembly-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>static</id>
                                    <goals>
                                        <goal>single</goal>
                                    </goals>
                                    <phase>package</phase>
                                    <configuration>
                                        <descriptors>
                                            <descriptor>${shared.resources}/assemblies/static-resources.xml</descriptor>
                                        </descriptors>
                                        <finalName>static-resources</finalName>
                                        <appendAssemblyId>false</appendAssemblyId>
                                    </configuration>
                                </execution>
                            </executions>
                        </plugin>

                        <plugin>
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>wagon-maven-plugin</artifactId>
                            <configuration>
                                <fromDir>${project.build.directory}</fromDir>
                                <serverId>static-dot-s2</serverId>
                                <url>scp://docs.af.pivotal.io</url>
                            </configuration>
                            <executions>

                                <!-- Upload namespace XSDs -->

                                <execution>
                                    <id>upload-schema</id>
                                    <phase>deploy</phase>
                                    <goals>
                                        <goal>upload</goal>
                                    </goals>
                                    <configuration>
                                        <fromDir>${project.root}/target/schemas</fromDir>
                                        <includes>*.xsd,.autoschemaln</includes>
                                        <toDir>/var/www/domains/spring.io/www/htdocs/autorepo/schema/${dist.id}/${project.version}</toDir>
                                        <optimize>true</optimize>
                                    </configuration>
                                </execution>

                                <!-- Distribute static resources -->

                                <execution>
                                    <id>upload-static-resources</id>
                                    <phase>deploy</phase>
                                    <goals>
                                        <goal>upload</goal>
                                    </goals>
                                    <configuration>
                                        <fromDir>${project.build.directory}/static-resources</fromDir>
                                        <includes>**</includes>
                                        <toDir>/var/www/domains/spring.io/www/htdocs/autorepo/docs/${dist.id}/${project.version}</toDir>
                                        <optimize>true</optimize>
                                    </configuration>
                                </execution>

                                <!-- Makes sure resources can be overriden by others -->
                                <execution>
                                    <id>make-resources-group-writable</id>
                                    <phase>deploy</phase>
                                    <goals>
                                        <goal>sshexec</goal>
                                    </goals>
                                    <configuration> <!-- Prevent reformatting, wrap with CDATA -->
                                        <commands>
                                            <command>
                                                <![CDATA[
													 if [ -d /var/www/domains/spring.io/www/htdocs/autorepo/schema/${dist.id}/${project.version}/ ]
													 then
														find /var/www/domains/spring.io/www/htdocs/autorepo/schema/${dist.id}/${project.version}/ ! -perm -g=w -exec chmod g+w {} \;
													 fi
													]]>
                                            </command>
                                            <command>
                                                <![CDATA[
													 if [ -d /var/www/domains/spring.io/www/htdocs/autorepo/docs/${dist.id}/${project.version}/ ]
													 then
														find /var/www/domains/spring.io/www/htdocs/autorepo/docs/${dist.id}/${project.version}/ ! -perm -g=w -exec chmod g+w {} \;
													 fi
													]]>
                                            </command>
                                        </commands>
                                    </configuration>
                                </execution>

                            </executions>
                        </plugin>

                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-deploy-plugin</artifactId>
                            <configuration>
                                <skip>true</skip>
                            </configuration>
                        </plugin>

                    </plugins>
                </pluginManagement>
            </build>
        </profile>


    </profiles>

    <dependencies>

        <!-- Test -->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <version>${hamcrest}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <version>${hamcrest}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>${assertj}</version>
            <scope>test</scope>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j}</version>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback}</version>
            <scope>test</scope>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok}</version>
            <optional>true</optional>
        </dependency>

    </dependencies>

    <build>

        <extensions>
            <extension>
                <groupId>org.apache.maven.wagon</groupId>
                <artifactId>wagon-ssh</artifactId>
                <version>2.12</version>
            </extension>
        </extensions>

        <!--
            Default versioned declarations of managed plugins
            to be overridden when the distribute profile is active.
            If this section was missing, Maven would complain about
            missing version numbers for executions without the
            profile active.
        -->

        <pluginManagement>

            <plugins>

                <plugin>
                    <groupId>org.asciidoctor</groupId>
                    <artifactId>asciidoctor-maven-plugin</artifactId>
                    <version>1.5.7.1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>1.8</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>3.1.1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>1.4.1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>2.22.1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>3.0.1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>3.0.1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.22.1</version>
                    <configuration>
                        <useSystemClassLoader>false</useSystemClassLoader>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>wagon-maven-plugin</artifactId>
                    <version>1.0</version>
                </plugin>

                <plugin>
                    <groupId>org.projectlombok</groupId>
                    <artifactId>lombok-maven-plugin</artifactId>
                    <version>1.18.4.0</version>
                </plugin>

            </plugins>

        </pluginManagement>

        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
            </plugin>

            <plugin>
                <artifactId>kotlin-maven-plugin</artifactId>
                <groupId>org.jetbrains.kotlin</groupId>
                <version>${kotlin}</version>
                <configuration>
                    <jvmTarget>${source.level}</jvmTarget>
                </configuration>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <sourceDirs>
                                <sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
                                <sourceDir>${project.basedir}/src/main/java</sourceDir>
                            </sourceDirs>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                        <configuration>
                            <sourceDirs>
                                <sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
                                <sourceDir>${project.basedir}/src/test/java</sourceDir>
                            </sourceDirs>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${source.level}</source>
                    <target>${source.level}</target>
                </configuration>
                <executions>
                    <execution>
                        <id>default-compile</id>
                        <phase>none</phase>
                    </execution>
                    <execution>
                        <id>default-testCompile</id>
                        <phase>none</phase>
                    </execution>
                    <execution>
                        <id>java-compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>java-test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <useSystemClassLoader>false</useSystemClassLoader>
                    <useFile>false</useFile>
                    <includes>
                        <include>**/*Tests.java</include>
                    </includes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifestEntries>
                            <Implementation-Title>${project.name}</Implementation-Title>
                            <Implementation-Version>${project.version}</Implementation-Version>
                            <Automatic-Module-Name>${java-module-name}</Automatic-Module-Name>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-kotlin-source</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.basedir}/src/main/kotlin</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok-maven-plugin</artifactId>
                <configuration>
                    <addOutputDirectory>false</addOutputDirectory>
                    <sourceDirectory>${project.basedir}/src/main/java</sourceDirectory>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <breakiterator>true</breakiterator>
                    <header>${project.name}</header>
                    <source>${source.level}</source>
                    <quiet>true</quiet>
                    <javadocDirectory>${shared.resources}/javadoc</javadocDirectory>
                    <overview>${shared.resources}/javadoc/overview.html</overview>
                    <stylesheetfile>${shared.resources}/javadoc/opizza-javadoc.css</stylesheetfile>
                    <!-- copies doc-files subdirectory which contains image resources -->
                    <docfilessubdirs>true</docfilessubdirs>
                    <additionalJOptions>
                        <additionalJOption>-Xdoclint:none</additionalJOption>
                    </additionalJOptions>
                    <sourcepath>target/generated-sources/delombok</sourcepath>
                    <links>
                        <link>https://docs.spring.io/spring/docs/5.0.x/javadoc-api/</link>
                        <link>https://docs.spring.io/spring-data/commons/docs/current/api/</link>
                        <link>https://docs.oracle.com/javase/8/docs/api/</link>
                    </links>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <executions>
                    <execution>
                        <id>enforce-maven-version</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>3.5.0</version>
                                </requireMavenVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>


</project>
